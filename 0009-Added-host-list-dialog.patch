From 24849b59b58d05ae6064a017e63d5688b50a817e Mon Sep 17 00:00:00 2001
From: Ilia Maslakov <il.smind@gmail.com>
Date: Mon, 12 Dec 2011 03:10:54 +0400
Subject: [PATCH 09/10] Added host list dialog

Signed-off-by: Ilia Maslakov <il.smind@gmail.com>
---
 lib/fileloc.h              |    2 +
 src/filemanager/cmd.c      |    3 +-
 src/vfs/sftpfs/Makefile.am |    1 +
 src/vfs/sftpfs/dialogs.c   |  103 +++++++---
 src/vfs/sftpfs/hostlist.c  |  475 ++++++++++++++++++++++++++++++++++++++++++++
 src/vfs/sftpfs/hostlist.h  |   24 +++
 src/vfs/sftpfs/sftpfs.c    |  114 +++++------
 7 files changed, 637 insertions(+), 85 deletions(-)
 create mode 100644 src/vfs/sftpfs/hostlist.c
 create mode 100644 src/vfs/sftpfs/hostlist.h

diff --git a/lib/fileloc.h b/lib/fileloc.h
index d0ca28b..2b6d7ae 100644
--- a/lib/fileloc.h
+++ b/lib/fileloc.h
@@ -49,6 +49,8 @@
 #define FISH_APPEND_FILE        "append"
 #define FISH_INFO_FILE          "info"
 
+#define SFTP_HOSTLIST_FILE      "hostlist.ini"
+
 #define MC_EXTFS_DIR            "extfs.d"
 
 #define MC_BASHRC_FILE          "bashrc"
diff --git a/src/filemanager/cmd.c b/src/filemanager/cmd.c
index f529274..60e51a2 100644
--- a/src/filemanager/cmd.c
+++ b/src/filemanager/cmd.c
@@ -1458,8 +1458,7 @@ ftplink_cmd (void)
 void
 sftplink_cmd (void)
 {
-    nice_cd (_("SFTP to machine"), _(machine_str),
-             "[SFTP File System]", ":sftplink_cmd: SFTP to machine ", "/#sftp:", 1);
+    (void) do_panel_cd (MENU_PANEL, "sftp://", cd_parse_command);
 }
 #endif /* ENABLE_VFS_FTP */
 
diff --git a/src/vfs/sftpfs/Makefile.am b/src/vfs/sftpfs/Makefile.am
index 56b5cea..1ec5b40 100644
--- a/src/vfs/sftpfs/Makefile.am
+++ b/src/vfs/sftpfs/Makefile.am
@@ -4,4 +4,5 @@ AM_CPPFLAGS =
 noinst_LTLIBRARIES = libvfs-sftpfs.la
 
 libvfs_sftpfs_la_SOURCES = \
+	hostlist.c hostlist.h \
 	dialogs.c dialogs.h sftpfs.c sftpfs.h
diff --git a/src/vfs/sftpfs/dialogs.c b/src/vfs/sftpfs/dialogs.c
index 626dbe1..ee11741 100644
--- a/src/vfs/sftpfs/dialogs.c
+++ b/src/vfs/sftpfs/dialogs.c
@@ -39,7 +39,7 @@
 /*** file scope macro definitions ****************************************************************/
 
 #define VFSX 60
-#define VFSY 19
+#define VFSY 21
 
 /*** file scope type declarations ****************************************************************/
 
@@ -48,6 +48,45 @@
 /*** file scope functions ************************************************************************/
 /* --------------------------------------------------------------------------------------------- */
 
+static cb_ret_t
+sftpfs_conn_callback (Dlg_head * h, Widget * sender, dlg_msg_t msg, int parm, void *data)
+{
+
+    switch (msg)
+    {
+    case DLG_INIT:
+        sender = dlg_find_by_id (h, 4);
+        /* FALLTHROUGH */
+
+    case DLG_ACTION:
+        /* message from radiobuttons checkbutton */
+        if (sender != NULL && sender->id == 4)
+        {
+            const gboolean disable = (((WRadio *) sender)->sel != 1);
+            Widget *w;
+
+            /* input */
+            w = dlg_find_by_id (h, 2);
+            widget_disable (*w, disable);
+            if (msg == DLG_ACTION)
+                send_message (w, WIDGET_DRAW, 0);
+            /* label */
+            w = dlg_find_by_id (h, 3);
+            widget_disable (*w, disable);
+            if (msg == DLG_ACTION)
+                send_message (w, WIDGET_DRAW, 0);
+
+            return MSG_HANDLED;
+        }
+        return MSG_NOT_HANDLED;
+
+    default:
+        return default_dlg_callback (h, sender, msg, parm, data);
+    }
+}
+
+/* --------------------------------------------------------------------------------------------- */
+
 static const char *
 sftpfs_prepare_buffers (const char *from, char *to, size_t to_len)
 {
@@ -78,50 +117,54 @@ configure_sftpfs_conn (const char *sftpfs_sessionname)
     char buffer5[200] = "\0";           /* session name */
     char buffer6[100] = "\0";           /* user name */
 
-    char *tmp_pubkey = NULL;
     char *tmp_privkey = NULL;
     char *tmp_sftp_host = NULL;
     char *tmp_sftp_port = NULL;
+    char *tmp_sessionname = g_strdup (sftpfs_sessionname);
     int tmp_auth_method = sftpfs_auth_method;
     char *tmp_username = NULL;
     char *tmp_pre_port = g_strdup_printf ("%i", sftpfs_port);
 
     const char *auth_names[] = {
-        N_("Password"),
-        N_("Publickey"),
-        N_("SSH-Agent"),
+        N_("&Password"),
+        N_("SSH &key"),
+        N_("SSH-&Agent"),
     };
 
-    QuickWidget confvfs_widgets[] = {
-        /*  0 */ QUICK_BUTTON (30, VFSX, VFSY - 3, VFSY, N_("&Cancel"), B_CANCEL, NULL),
-        /*  1 */ QUICK_BUTTON (12, VFSX, VFSY - 3, VFSY, N_("&Save"), B_EXIT, NULL),
-        /*  4 */ QUICK_INPUT (4, VFSX, 11, VFSY,
+    QuickWidget sftpfs_widgets[] = {
+        /*  0 */ QUICK_BUTTON (35, VFSX, VFSY - 3, VFSY, N_("&Cancel"), B_CANCEL, NULL),
+        /*  1 */ QUICK_BUTTON (15, VFSX, VFSY - 3, VFSY, N_("&Save"), B_EXIT, NULL),
+        /*  2 */ QUICK_INPUT (4, VFSX, 14, VFSY,
                               sftpfs_prepare_buffers (sftpfs_privkey, buffer3, sizeof (buffer3)),
-                              VFSX - 14, 2, "input-sftp-priv-key", &tmp_privkey),
-        /*  5 */ QUICK_LABEL (4, VFSX, 10, VFSY, N_("SSH private key:")),
+                              VFSX - 9, 2, "input-sftp-priv-key", &tmp_privkey),
+        /*  3 */ QUICK_LABEL (4, VFSX, 13, VFSY, N_("SSH private key:")),
 
-        /*  6 */ QUICK_RADIO (4, VFSX, 7, VFSY, 3, auth_names, (int *) &tmp_auth_method),
-        /*  3 */ QUICK_LABEL (4, VFSX, 6, VFSY, N_("Auth method:")),
-        /*  2 */ QUICK_INPUT (4, VFSX, 5, VFSY,
+        /*  4 */ QUICK_RADIO (4, VFSX, 10, VFSY, 3, auth_names, (int *) &tmp_auth_method),
+        /*  5 */ QUICK_LABEL (4, VFSX, 9, VFSY, N_("Auth method:")),
+        /*  6 */ QUICK_INPUT (4, VFSX, 8, VFSY,
                               sftpfs_prepare_buffers (sftpfs_user, buffer6, sizeof (buffer6)),
-                              VFSX - 13, 2, "input-sftp-user", &tmp_username),
-        /*  3 */ QUICK_LABEL (4, VFSX, 4, VFSY, N_("User name:")),
-        /*  6 */ QUICK_INPUT (37, VFSX, 3, VFSY,
+                              VFSX - 9, 2, "input-sftp-user", &tmp_username),
+        /*  7 */ QUICK_LABEL (4, VFSX, 7, VFSY, N_("User name:")),
+        /*  8 */ QUICK_INPUT (45, VFSX, 6, VFSY,
                               sftpfs_prepare_buffers (tmp_pre_port, buffer1, sizeof (buffer1)),
                               10, 0, "input-sftp-port", &tmp_sftp_port),
-        /*  7 */ QUICK_LABEL (37, VFSX, 2, VFSY, N_("Port:")),
-        /*  8 */ QUICK_INPUT (4, VFSX, 3, VFSY,
+        /*  9 */ QUICK_LABEL (45, VFSX, 5, VFSY, N_("Port:")),
+        /* 10 */ QUICK_INPUT (4, VFSX, 6, VFSY,
                               sftpfs_prepare_buffers (sftpfs_host, buffer2, sizeof (buffer2)),
-                              30, 2, "input-sftp-host", &tmp_sftp_host),
-        /*  9 */ QUICK_LABEL (4, VFSX, 2, VFSY, N_("Host:")),
+                              40, 2, "input-sftp-host", &tmp_sftp_host),
+        /* 11 */ QUICK_LABEL (4, VFSX, 5, VFSY, N_("Host:")),
+        /* 12 */ QUICK_INPUT (4, VFSX, 4, VFSY,
+                              sftpfs_prepare_buffers (sftpfs_sessionname, buffer5, sizeof (buffer5)),
+                              VFSX - 9, 2, "input-sftp-session", &tmp_sessionname),
+        /* 13 */ QUICK_LABEL (4, VFSX, 3, VFSY, N_("Session name:")),
 
         QUICK_END
     };
 
     QuickDialog confvfs_dlg = {
         VFSX, VFSY, -1, -1, N_("SFTP File System Settings"),
-        "[Virtual FS]", confvfs_widgets,
-        NULL,
+        "[SFTP (SSH File Transfer Protocol) filesystem]", sftpfs_widgets,
+        sftpfs_conn_callback,
         FALSE
     };
 
@@ -129,18 +172,28 @@ configure_sftpfs_conn (const char *sftpfs_sessionname)
 
     if (quick_dialog (&confvfs_dlg) != B_CANCEL)
     {
+        char *new_sessionname = NULL;
+
         g_free (sftpfs_pubkey);
         g_free (sftpfs_privkey);
         g_free (sftpfs_host);
         g_free (sftpfs_user);
 
-        sftpfs_pubkey = tmp_pubkey;
         sftpfs_privkey = tmp_privkey;
+        sftpfs_pubkey = g_strdup_printf ("%s.pub", tmp_privkey);
         sftpfs_host = tmp_sftp_host;
         sftpfs_port = atoi (tmp_sftp_port);
         sftpfs_auth_method = tmp_auth_method;
         sftpfs_user = tmp_username;
-        sftpfs_save_param (sftpfs_sessionname);
+
+        if ((tmp_sessionname != NULL) && (tmp_sessionname[0] != '\0'))
+            sftpfs_save_param (tmp_sessionname);
+        else
+        {
+            new_sessionname = g_strdup_printf ("%s@%s", sftpfs_user, sftpfs_host);
+            sftpfs_save_param (new_sessionname);
+            g_free (new_sessionname);
+        }
     }
 }
 
diff --git a/src/vfs/sftpfs/hostlist.c b/src/vfs/sftpfs/hostlist.c
new file mode 100644
index 0000000..0df17b6
--- /dev/null
+++ b/src/vfs/sftpfs/hostlist.c
@@ -0,0 +1,475 @@
+/*
+   sftp hostlist
+
+   Copyright (C) 2011
+   The Free Software Foundation, Inc.
+
+   Written by:
+   ilia maslakov 2011
+
+   based on hotlist.c
+
+   This file is part of the Midnight Commander.
+
+   The Midnight Commander is free software: you can redistribute it
+   and/or modify it under the terms of the GNU General Public License as
+   published by the Free Software Foundation, either version 3 of the License,
+   or (at your option) any later version.
+
+   The Midnight Commander is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/** \file hostlist.c
+ *  \brief Source: hostlist
+ */
+
+#include <config.h>
+
+#include <ctype.h>
+#include <stdio.h>
+#include <string.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <unistd.h>
+
+#include "lib/global.h"
+
+#include "lib/tty/tty.h"        /* COLS */
+#include "lib/tty/key.h"        /* KEY_M_CTRL */
+#include "lib/skin.h"           /* colors */
+#include "lib/mcconfig.h"       /* Load/save directories hotlist */
+#include "lib/fileloc.h"
+#include "lib/strutil.h"
+#include "lib/vfs/vfs.h"
+#include "lib/util.h"
+#include "lib/widget.h"
+#include "lib/fileloc.h"
+
+#include "src/setup.h"          /* For profile_bname */
+#include "src/history.h"
+
+#include "src/filemanager/midnight.h"           /* current_panel */
+#include "src/filemanager/command.h"            /* cmdline */
+#include "src/keybind-defaults.h"               /* main_map */
+
+#include "dialogs.h"
+#include "sftpfs.h"
+#include "hostlist.h"
+
+/*** global variables ****************************************************************************/
+
+/*** file scope macro definitions ****************************************************************/
+
+/*** file scope type declarations ****************************************************************/
+
+/*** file scope variables ************************************************************************/
+
+static WListbox *l_hostlist;
+static WButtonBar *hostlist_bar;
+static Dlg_head *hostlist_dlg;
+
+static int list_left_pos = 0;
+static int list_top_pos = 0;
+static int list_height = 10;
+static int list_width = 10;
+static gboolean hostlist_empty = TRUE;
+
+/*** file scope functions ************************************************************************/
+/* --------------------------------------------------------------------------------------------- */
+
+static void
+hostlist_unlink_entry (char *entry)
+{
+    char *profile;
+    mc_config_t *sftpfs_config;
+    char *title;
+    int result;
+
+    if (entry == NULL)
+        return;
+
+    title = g_strconcat (_("Remove:"), " ", str_trunc (entry, 30), (char *) NULL);
+
+    if (safe_delete)
+        query_set_sel (1);
+    result = query_dialog (title, _("Are you sure you want to remove this entry?"),
+                           D_ERROR, 2, _("&Yes"), _("&No"));
+    g_free (title);
+
+    if (result != 0)
+        return;
+
+    profile = g_build_filename (mc_config_get_path (), SFTP_HOSTLIST_FILE, NULL);
+    sftpfs_config = mc_config_init (profile);
+    g_free (profile);
+    mc_config_del_group (sftpfs_config, entry);
+    mc_config_save_file (sftpfs_config, NULL);
+    mc_config_deinit (sftpfs_config);
+}
+
+/* --------------------------------------------------------------------------------------------- */
+
+static gboolean
+hostlist_fill_listbox (void)
+{
+    char *profile;
+    mc_config_t *sftpfs_config;
+    gchar **group_names, **orig_group_names;
+    int i = 0;
+
+    profile = g_build_filename (mc_config_get_path (), SFTP_HOSTLIST_FILE, NULL);
+    sftpfs_config = mc_config_init (profile);
+    g_free (profile);
+
+    orig_group_names = group_names = mc_config_get_groups (sftpfs_config , NULL);
+
+    while (*group_names != NULL)
+    {
+        listbox_add_item (l_hostlist, LISTBOX_APPEND_AT_END, 0, *group_names, NULL);
+        group_names++;
+        i++;
+    }
+
+    g_strfreev (orig_group_names);
+    mc_config_deinit (sftpfs_config);
+    if (i == 0)
+    {
+        hostlist_empty = TRUE;
+        listbox_add_item (l_hostlist, LISTBOX_APPEND_AT_END, 0, _("Press S-F4 to edit new session"), NULL);
+        return FALSE;
+    }
+
+    hostlist_empty = FALSE;
+    return TRUE;
+
+}
+
+/* --------------------------------------------------------------------------------------------- */
+
+static void
+hostlist_reload_list (void)
+{
+    char *text = NULL;
+    char *sel = NULL;
+    int cur_pos = 0;
+
+    if (!hostlist_empty)
+    {
+        listbox_get_current (l_hostlist, &text, NULL);
+        if (text != NULL)
+        {
+            sel = g_strdup (text);
+            listbox_remove_list (l_hostlist);
+        }
+    }
+    else
+    {
+        /* remove entry "Press S-F4..." */
+        listbox_remove_list (l_hostlist);
+    }
+
+    (void) hostlist_fill_listbox ();
+
+    if (!hostlist_empty && text != NULL)
+    {
+        cur_pos = listbox_search_text (l_hostlist, sel);
+        g_free (sel);
+    }
+    listbox_select_entry (l_hostlist, cur_pos);
+}
+
+/* --------------------------------------------------------------------------------------------- */
+
+static void
+hostlist_refresh (Dlg_head * dlg)
+{
+    common_dialog_repaint (dlg);
+    buttonbar_redraw (hostlist_bar);
+}
+
+/* --------------------------------------------------------------------------------------------- */
+
+static void
+hostlist_set_pos (void)
+{
+    list_height = LINES - 8;
+
+    if (mc_global.keybar_visible)
+        list_height--;
+
+    if (mc_global.message_visible)
+        list_height--;
+
+    if (command_prompt)
+        list_height--;
+
+    if (menubar_visible)
+        list_height--;
+
+    if (horizontal_split)
+    {
+        list_height =  list_height / 2;
+        list_width = COLS;
+        list_left_pos = 3;
+        if (MENU_PANEL_IDX == 1)
+            list_top_pos = list_height + 6;
+        else
+            list_top_pos = 2;
+        list_width -= 8;
+    }
+    else
+    {
+        list_top_pos = 4;
+        list_width = COLS / 2;
+        if (MENU_PANEL_IDX == 1)
+            list_left_pos = list_width + 3;
+        else
+            list_left_pos = 3;
+        list_width -= 6;
+    }
+}
+
+/* --------------------------------------------------------------------------------------------- */
+
+static int
+hostlist_button_callback (WButton * button, int action)
+{
+    (void) button;
+
+    switch (action)
+    {
+    case B_ENTER:
+        {
+            return MSG_HANDLED;
+            /* Fall through - go up */
+        }
+        /* Fall through if list empty - just go up */
+    default:
+        return MSG_HANDLED;
+    }
+}
+
+
+
+/* --------------------------------------------------------------------------------------------- */
+
+static inline cb_ret_t
+hostlist_handle_key (Dlg_head * h, int key)
+{
+    char *text = NULL;
+    int cur_pos = 0;
+    switch (key)
+    {
+    case '\n':
+    case KEY_ENTER:
+        if (hostlist_empty)
+        {
+            configure_sftpfs_conn (NULL);
+            hostlist_reload_list ();
+            send_message ((Widget *) l_hostlist, WIDGET_DRAW, 0);
+            hostlist_refresh (h);
+        }
+        else if (hostlist_button_callback (NULL, B_ENTER))
+        {
+            h->ret_value = B_ENTER;
+            dlg_stop (h);
+        }
+        return MSG_HANDLED;
+
+    case KEY_F (4):
+        if (!hostlist_empty)
+            listbox_get_current (l_hostlist, &text, NULL);
+        if (text != NULL)
+            sftpfs_load_param  (text);
+        configure_sftpfs_conn (text);
+        hostlist_reload_list ();
+        send_message ((Widget *) l_hostlist, WIDGET_DRAW, 0);
+        return MSG_HANDLED;
+
+    case KEY_F (8):
+        listbox_get_current (l_hostlist, &text, NULL);
+        if (text != NULL)
+        {
+            cur_pos = listbox_search_text (l_hostlist, text);
+            hostlist_unlink_entry (text);
+        }
+        hostlist_reload_list ();
+        listbox_select_entry (l_hostlist, cur_pos);
+        send_message ((Widget *) l_hostlist, WIDGET_DRAW, 0);
+        return MSG_HANDLED;
+
+    case KEY_F (14):
+        configure_sftpfs_conn (NULL);
+        hostlist_reload_list ();
+        send_message ((Widget *) l_hostlist, WIDGET_DRAW, 0);
+        hostlist_refresh (h);
+        return MSG_HANDLED;
+    default:
+        return MSG_NOT_HANDLED;
+    }
+}
+
+/* --------------------------------------------------------------------------------------------- */
+
+static cb_ret_t
+hostlist_callback (Dlg_head * h, Widget * sender, dlg_msg_t msg, int parm, void *data)
+{
+    switch (msg)
+    {
+    case DLG_POST_KEY:
+        dlg_select_widget (l_hostlist);
+        /* always stay on hostlist */
+        /* fall through */
+
+    case DLG_INIT:
+        tty_setcolor (MENU_ENTRY_COLOR);
+        return MSG_HANDLED;
+
+    case DLG_RESIZE:
+        /* simply call dlg_set_size() with new size */
+        hostlist_set_pos ();
+        dlg_set_size (h, list_height, list_width);
+        dlg_set_position (h, list_top_pos, list_left_pos,
+                          list_top_pos + list_height, list_left_pos + list_width);
+        widget_set_size ((Widget *) hostlist_bar, LINES - 1, 0, 1, COLS);
+        return MSG_HANDLED;
+
+    case DLG_UNHANDLED_KEY:
+        return hostlist_handle_key (h, parm);
+
+    default:
+        return default_dlg_callback (h, sender, msg, parm, data);
+    }
+}
+
+/* --------------------------------------------------------------------------------------------- */
+
+static lcback_ret_t
+l_call (WListbox * list)
+{
+    Dlg_head *dlg = list->widget.owner;
+
+    if (list->count != 0)
+    {
+        void *data = NULL;
+
+        listbox_get_current (list, NULL, &data);
+
+        if (data != NULL)
+        {
+            dlg->ret_value = B_ENTER;
+            dlg_stop (dlg);
+            return LISTBOX_DONE;
+        }
+        else
+        {
+            dlg->ret_value = B_ENTER;
+            dlg_stop (dlg);
+            return LISTBOX_DONE;
+        }
+    }
+
+    return LISTBOX_CONT;
+}
+
+/* --------------------------------------------------------------------------------------------- */
+
+static gboolean
+hostlist_init (void)
+{
+    const char *title = N_("SFTP sessions");
+    const char *help_node = "[SFTP (SSH File Transfer Protocol) filesystem]";
+
+#ifdef ENABLE_NLS
+    title = _(title);
+#endif
+
+    hostlist_set_pos ();
+    do_refresh ();
+
+    hostlist_dlg =
+        create_dlg (TRUE, list_top_pos, list_left_pos, list_height, list_width, dialog_colors,
+                    hostlist_callback, help_node, title, DLG_NONE);
+
+    /* get new listbox */
+    l_hostlist = listbox_new (2, 1, list_height - 4, list_width - 3, FALSE, l_call);
+    (void) hostlist_fill_listbox ();
+    add_widget_autopos (hostlist_dlg, l_hostlist, WPOS_KEEP_ALL);
+
+    hostlist_bar = buttonbar_new (TRUE);
+    add_widget (hostlist_dlg, hostlist_bar);
+
+    /* restore ButtonBar coordinates after add_widget() */
+    ((Widget *) hostlist_bar)->x = 0;
+    ((Widget *) hostlist_bar)->y = LINES - 1;
+
+    buttonbar_set_label (hostlist_bar, 1, Q_ ("ButtonBar|Help"), NULL, NULL);
+    buttonbar_set_label (hostlist_bar, 2, "", NULL, NULL);
+    buttonbar_set_label (hostlist_bar, 3, "", NULL, NULL);
+    buttonbar_set_label (hostlist_bar, 4, Q_ ("ButtonBar|Edit"), NULL, NULL);
+    buttonbar_set_label (hostlist_bar, 5, "", NULL, NULL);
+    buttonbar_set_label (hostlist_bar, 6, "", NULL, NULL);
+    buttonbar_set_label (hostlist_bar, 7, "", NULL, NULL);
+    buttonbar_set_label (hostlist_bar, 8, Q_ ("ButtonBar|Delete"), NULL, NULL);
+    buttonbar_set_label (hostlist_bar, 9, "", NULL, NULL);
+    buttonbar_set_label (hostlist_bar, 10, Q_ ("ButtonBar|Quit"), NULL, NULL);
+
+    return TRUE;
+}
+
+/* --------------------------------------------------------------------------------------------- */
+/**
+ * Destroy the list dialog.
+ * Don't confuse with hostlist_done () for the list in memory.
+ */
+
+void
+hostlist_done (void)
+{
+    destroy_dlg (hostlist_dlg);
+    l_hostlist = NULL;
+    if (0)
+        update_panels (UP_OPTIMIZE, UP_KEEPSEL);
+    repaint_screen ();
+}
+
+/* --------------------------------------------------------------------------------------------- */
+/*** public functions ****************************************************************************/
+/* --------------------------------------------------------------------------------------------- */
+
+char *
+hostlist_show (void)
+{
+    char *target = NULL;
+
+    (void) hostlist_init ();
+
+    /* display file info */
+    tty_setcolor (SELECTED_COLOR);
+
+    switch (run_dlg (hostlist_dlg))
+    {
+    case B_ENTER:
+        {
+            char *text = NULL;
+            listbox_get_current (l_hostlist, &text, NULL);
+            target = g_strdup (text);
+
+            break;
+        }
+
+    default:
+        break;
+    }                           /* switch */
+
+    hostlist_done ();
+    return target;
+}
+
+/* --------------------------------------------------------------------------------------------- */
diff --git a/src/vfs/sftpfs/hostlist.h b/src/vfs/sftpfs/hostlist.h
new file mode 100644
index 0000000..c9d7c3a
--- /dev/null
+++ b/src/vfs/sftpfs/hostlist.h
@@ -0,0 +1,24 @@
+/** \file hostlist.h
+ *  \brief Header: hostlist
+ */
+
+#ifndef MC__HOSTLIST_H
+#define MC__HOSTLIST_H
+
+/*** typedefs(not structures) and defined constants **********************************************/
+
+/*** enums ***************************************************************************************/
+
+/*** structures declarations (and typedefs of structures)*****************************************/
+
+/*** global variables defined in .c file *********************************************************/
+
+/*** declarations of public functions ************************************************************/
+
+void hostlist_cmd (void);
+char *hostlist_show (void);
+int hostlist_save (void);
+void hostlist_done (void);
+
+/*** inline functions ****************************************************************************/
+#endif /* MC__HOSTLIST_H */
diff --git a/src/vfs/sftpfs/sftpfs.c b/src/vfs/sftpfs/sftpfs.c
index d4c44c2..9afa894 100644
--- a/src/vfs/sftpfs/sftpfs.c
+++ b/src/vfs/sftpfs/sftpfs.c
@@ -47,7 +47,7 @@
 #include <libssh2_sftp.h>
 
 #include "lib/global.h"
-
+#include "lib/widget/wtools.h"
 #include "lib/util.h"
 #include "lib/tty/tty.h"        /* tty_enable_interrupt_key () */
 #include "lib/mcconfig.h"
@@ -57,7 +57,9 @@
 #include "lib/vfs/xdirentry.h"
 #include "lib/vfs/gc.h"         /* vfs_stamp_create */
 #include "lib/event.h"
+#include "lib/fileloc.h"
 
+#include "hostlist.h"
 #include "sftpfs.h"
 #include "dialogs.h"
 
@@ -69,7 +71,7 @@ char *sftpfs_pubkey = NULL;
 char *sftpfs_user = NULL;
 char *sftpfs_host = NULL;
 int sftpfs_port = 22;
-int sftpfs_auth_method;
+int sftpfs_auth_method = 0;
 gboolean sftpfs_newcon = TRUE;
 
 /*** file scope macro definitions ****************************************************************/
@@ -1007,7 +1009,6 @@ sftpfs_open_socket (struct vfs_s_super *super)
         vfs_print_message (_("sftp: Invalid port value."));
         return -1;
     }
-
     tty_enable_interrupt_key ();        /* clear the interrupt flag */
 
     memset (&hints, 0, sizeof (struct addrinfo));
@@ -1042,7 +1043,6 @@ sftpfs_open_socket (struct vfs_s_super *super)
     for (curr_res = res; curr_res != NULL; curr_res = curr_res->ai_next)
     {
         my_socket = socket (curr_res->ai_family, curr_res->ai_socktype, curr_res->ai_protocol);
-
         if (my_socket < 0)
         {
             if (curr_res->ai_next != NULL)
@@ -1059,7 +1059,6 @@ sftpfs_open_socket (struct vfs_s_super *super)
 
         if (connect (my_socket, curr_res->ai_addr, curr_res->ai_addrlen) >= 0)
             break;
-
         sftpfs_errno_int = errno;
         close (my_socket);
 
@@ -1109,7 +1108,6 @@ sftpfs_do_connect (struct vfs_class *me, struct vfs_s_super *super)
     /* ... start it up. This will trade welcome banners, exchange keys,
      * and setup crypto, compression, and MAC layers
      */
-
     rc = libssh2_session_startup (SUP->session, SUP->socket_handle);
     if (rc != 0)
     {
@@ -1126,7 +1124,6 @@ sftpfs_do_connect (struct vfs_class *me, struct vfs_s_super *super)
     /* check what authentication methods are available */
     userauthlist = libssh2_userauth_list (SUP->session, super->path_element->user,
                                           strlen (super->path_element->user));
-
     if (sftpfs_auth_method == SFTP_AUTH_AUTO)
     {
         if (strstr (userauthlist, "password") != NULL)
@@ -1145,7 +1142,6 @@ sftpfs_do_connect (struct vfs_class *me, struct vfs_s_super *super)
             SUP->auth_pw = 8;
 
     }
-
     if (super->path_element->password == NULL && (SUP->auth_pw < 8))
     {
         char *p;
@@ -1260,73 +1256,68 @@ sftpfs_open_archive (struct vfs_s_super *super,
                      const vfs_path_t * vpath, const vfs_path_element_t * vpath_element)
 {
     char *sec = NULL;
-
+    int result;
     (void) vpath;
 
     if (vpath_element->host == NULL || *vpath_element->host == '\0')
     {
-        vfs_print_message (_("sftp: Invalid host name."));
-        vpath_element->class->verrno = EPERM;
-        return 0;
-    }
-
-    super->data = g_new0 (sftpfs_super_data_t, 1);
-    super->path_element = vfs_path_element_clone (vpath_element);
+        char *res;
 
-    if (super->path_element->user == NULL)
-    {
-        super->path_element->user = vfs_get_local_username ();
-        if (super->path_element->user == NULL)
+        res = hostlist_show ();
+        if (res == NULL)
+            return -1;
+        else
         {
-            vfs_path_element_free (super->path_element);
-            super->path_element = NULL;
-            g_free (super->data);
-            vpath_element->class->verrno = EPERM;
-            return 0;
-        }
-    }
-
-    sec = g_strdup_printf ("%s://%s@%s", vfs_sftpfs_ops.prefix,
-                           super->path_element->user, super->path_element->host);
+            super->data = g_new0 (sftpfs_super_data_t, 1);
+            sftpfs_load_param (res);
+            g_free (res);
 
-    sftpfs_load_param (sec);
+            if (sftpfs_host != NULL)
+                ((vfs_path_element_t *) vpath_element)->host = g_strdup (sftpfs_host);
+            else
+            {
+                vfs_print_message (_("sftp: Invalid host name."));
+                return -1;
+            }
 
-    if (sftpfs_newcon)
-    {
-        sftpfs_user = g_strdup (super->path_element->user);
-        sftpfs_host = g_strdup (super->path_element->host);
-        if (super->path_element->port > 0)
-            sftpfs_port = super->path_element->port;
+            if (sftpfs_user != NULL)
+                ((vfs_path_element_t *) vpath_element)->user = g_strdup (sftpfs_user);
+            else
+                ((vfs_path_element_t *) vpath_element)->user = g_strdup (vfs_get_local_username ());
+            ((vfs_path_element_t *) vpath_element)->port = sftpfs_port;
 
-        configure_sftpfs_conn (sec);
+            super->path_element = vfs_path_element_clone (vpath_element);
+        }
     }
+    else
+    {
 
-    g_free (sec);
-    g_free (super->path_element->user);
-    g_free (super->path_element->host);
-
-    g_free (vpath_element->host);
-    ((vfs_path_element_t *) vpath_element)->host = g_strdup (sftpfs_host);
-
-    g_free (vpath_element->user);
-    ((vfs_path_element_t *) vpath_element)->user = g_strdup (sftpfs_user);
-
-    ((vfs_path_element_t *) vpath_element)->port = sftpfs_port;
+        super->data = g_new0 (sftpfs_super_data_t, 1);
+        super->path_element = vfs_path_element_clone (vpath_element);
 
-    super->path_element->user = g_strdup (sftpfs_user);
-    super->path_element->host = g_strdup (sftpfs_host);
-    super->path_element->port = sftpfs_port ;
+        sec = g_strdup_printf ("%s@%s", super->path_element->user, super->path_element->host);
+        sftpfs_load_param (sec);
+        g_free (sec);
+        g_free (super->path_element->user);
+        g_free (super->path_element->host);
 
-    if (super->path_element->port == 0)
-        super->path_element->port = SFTP_DEFAULT_PORT;
+        super->path_element->user = g_strdup (sftpfs_user);
+        super->path_element->host = g_strdup (sftpfs_host);
+        super->path_element->port = sftpfs_port ;
 
-    SUP->auth_pw = 1;
+        if (super->path_element->port == 0)
+            super->path_element->port = SFTP_DEFAULT_PORT;
+    }
     super->name = g_strdup (PATH_SEP_STR);
     super->root =
         vfs_s_new_inode (vpath_element->class, super,
                          vfs_s_default_stat (vpath_element->class, S_IFDIR | 0755));
 
-    return sftpfs_do_connect (vpath_element->class, super);
+    result = sftpfs_do_connect (vpath_element->class, super);
+    if (result < 0)
+        (void) query_dialog (_("sftpfs"), _("Error!"), D_ERROR, 1, _("&OK"));
+    return result;
+
 }
 
 /* --------------------------------------------------------------------------------------------- */
@@ -1335,6 +1326,8 @@ static void
 sftpfs_free_archive (struct vfs_class *me, struct vfs_s_super *super)
 {
     (void) me;
+    if (SUP == NULL)
+        return;
 
     if (SUP->sftp_session != NULL)
         libssh2_sftp_shutdown (SUP->sftp_session);
@@ -1438,7 +1431,7 @@ sftpfs_load_param (const char *section_name)
     char *buffer;
     mc_config_t *sftpfs_config;
 
-    profile = g_build_filename (mc_config_get_path (), "hotlist.ini", NULL);
+    profile = g_build_filename (mc_config_get_path (), SFTP_HOSTLIST_FILE, NULL);
     sftpfs_config = mc_config_init (profile);
     g_free (profile);
 
@@ -1465,6 +1458,11 @@ sftpfs_load_param (const char *section_name)
         sftpfs_user = g_strdup (buffer);
     g_free (buffer);
 
+    buffer = mc_config_get_string (sftpfs_config, section_name, "host", "");
+    if (buffer != NULL && buffer[0] != '\0')
+        sftpfs_host = g_strdup (buffer);
+    g_free (buffer);
+
     sftpfs_port = mc_config_get_int (sftpfs_config, section_name, "port", SFTP_DEFAULT_PORT);
     mc_config_deinit (sftpfs_config);
 }
@@ -1477,7 +1475,7 @@ sftpfs_save_param (const char *section_name)
     char *profile;
     mc_config_t *sftpfs_config;
 
-    profile = g_build_filename (mc_config_get_path (), "hotlist.ini", NULL);
+    profile = g_build_filename (mc_config_get_path (), SFTP_HOSTLIST_FILE, NULL);
     sftpfs_config = mc_config_init (profile);
     g_free (profile);
 
-- 
1.7.7.6

